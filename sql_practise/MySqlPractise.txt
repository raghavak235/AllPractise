create database if not exists Exercise;
show databases;
use exercise;
select database()

describe orders

CREATE TABLE  if not exists customers (
    CustomerID int,
    CustomerName varchar(255),
    ContactName varchar(255),
    Address varchar(255),
    City varchar(255),
    PostalCode int, 
    Country varchar(255)
    
);

create table orders (
 orderid int,
 customerid int,
 employerid int,
 orderdate DATE ,
 shipperid int
 )

INSERT INTO Customers (CustomerID, CustomerName, ContactName ,Address, City, PostalCode, Country)
VALUES (1, 'Tom B. Erichsen', 'Skagen 21', 'Stavanger','PS', 4006, 'Norway');

INSERT INTO Customers (CustomerID, CustomerName, ContactName ,Address, City, PostalCode, Country)
VALUES (5, 'Sam', 'k', 'steve', 'KS','4006', 'Norway');

INSERT INTO Customers (CustomerID, CustomerName, ContactName ,Address, City, PostalCode, Country)
VALUES (6, 'Sas', 'ks', 'steves', 'MS','4006', 'Norway');
INSERT INTO Customers (CustomerID, CustomerName, ContactName ,Address, City, PostalCode, Country)
VALUES (7, 'Samk', 'sk', 'meve', 'TS','4006', 'Norway');



insert into orders VALUES (1024, 5, 4, '1996-07-04', 1);
insert into orders VALUES (1025, 6, 5, '1996-07-05', 2);
insert into orders VALUES (91026, 7, 4, '1996-07-06', 3);
insert into orders VALUES (91027, 1, 4, '1996-07-07', 4);


UPDATE orders
SET employerid=5, shipperid = 5
WHERE orderdate='1996-07-06';


select  * from orders where employerid = 4 and (orderdate = '1996-07-04' or orderdate= '1996-07-05')
select * from orders ORDER BY orderdate DESC;
select * from orders ORDER BY orderdate, customerid;
select * from orders ORDER BY orderdate ASC, shipperid DESC;
select  * from orders where employerid is NULL;
select  * from orders where employerid is NOT NULL;

delete from orders;
select * from orders;

delete from orders where employerid =5;

use exercise;
select min(orderid) from orders;
select max(orderid) from orders;
select SUM(orderid) from orders;
select avg(orderid) from orders  where employerid IS NOT NULL;
select count(orderid) from orders where employerid IS NOT NULL;


% - The percent sign represents zero, one, or multiple characters
_ - The underscore represents a single character
select * from customers;
select * from customers where CustomerName LIKE 'T%';
select * from customers where CustomerName LIKE '__s';



select * from customers;
select * from orders;
-- select * from customers JOIN  ORDERS ON customers.CustomerID = orders.customerid;

NO DIRECT FULL OUTER JOIN:
ALTERNATIVE: https://www.xaprb.com/blog/2006/05/26/how-to-write-full-outer-join-in-mysql/
select A.customerid as CustomerID, B.employerid, A.orderdate as EmployerID from orders A, orders B where A.customerid = B.employerid order by A.orderdate DESC


select CustomerID from customers 
UNION 
select customerid from orders
order by CustomerID;


select CustomerID from customers 
UNION ALL
select customerid from orders
order by CustomerID;

The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.



--------------------------------------------------------------------------------
https://database.guide/left-vs-substring-in-sql-server-whats-the-difference/#:~:text=each%20function%20does%3A-,LEFT(),%2C%20text%2C%20or%20image%20expression.

https://stackoverflow.com/questions/45218002/locate-vs-instr#:~:text=The%20INSTR()%20function%20returns,a%20string%20in%20another%20string.&text=The%20INSTR()%20function%20starts,to%20change%20the%20starting%20position.

https://www.w3schools.com/sql/func_mysql_binary.asp

https://www.tutorialspoint.com/What-is-the-difference-between-CONCAT-and-CONCAT-WS-functions#:~:text=Both%20CONCAT()%20and%20CONCAT_WS,no%20concept%20of%20the%20separator.